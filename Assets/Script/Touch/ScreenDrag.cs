using UnityEngine;using UnityEngine.Events;using UnityEngine.EventSystems;using TouchScript;public class ScreenDrag : MonoBehaviour {    private const int InvalidId = -1;    private const float LineNearZ = 1.0f;    public UnityAction<Vector2, float> on_world_dir_ = null;    public UnityAction on_world_dir_end_ = null;    [SerializeField]    private Camera camera_ = null;    [SerializeField]    private LineRenderer line_renderer_ = null;    private Vector2 start_ = Vector2.zero;    private Vector2 now_   = Vector2.zero;    private int id_ = InvalidId;    private bool on_drag_ = false;    private bool enable_ = false;    public bool enable {
        set { enable_ = value; }
    }    void OnDestory() {        on_world_dir_ = null;        on_world_dir_end_ = null;    }    void OnEnable() {        if (TouchManager.Instance != null) {            TouchManager.Instance.TouchesBegan += TouchesBeganHandler;            TouchManager.Instance.TouchesMoved += TouchesMovedHandler;            TouchManager.Instance.TouchesEnded += TouchesEndedHandler;            TouchManager.Instance.TouchesCancelled += TouchesCancelledHandler;            enable_ = true;        }    }    void OnDisable() {        if (TouchManager.Instance != null) {            TouchManager.Instance.TouchesBegan -= TouchesBeganHandler;            TouchManager.Instance.TouchesMoved -= TouchesMovedHandler;            TouchManager.Instance.TouchesEnded -= TouchesEndedHandler;            TouchManager.Instance.TouchesCancelled -= TouchesCancelledHandler;        }    }    void LateUpdate() {        if (!enable_) {
            return;
        }        if (line_renderer_.enabled && on_world_dir_ != null) {            OnWorldDir();        }    }    private void TouchesBeganHandler(object sender, TouchEventArgs e) {        if (!enable_ || on_drag_) {            return;        }        if (EventSystem.current.IsPointerOverGameObject()) {
            return;
        }        on_drag_ = true;        foreach (TouchPoint tp in e.Touches) {            if (EventSystem.current.IsPointerOverGameObject(tp.Id)) {
                continue;
            }            id_ = tp.Id;            start_ = tp.Position;            break;        }    }    private void TouchesMovedHandler(object sender, TouchEventArgs e) {        foreach (TouchPoint tp in e.Touches) {            if (id_ == tp.Id) {                now_ = tp.Position;                line_renderer_.enabled = true;                break;            }        }    }    private void TouchesEndedHandler(object sender, TouchEventArgs e) {        foreach (TouchPoint tp in e.Touches) {            if (id_ == tp.Id) {                EndCancel();                break;            }        }    }    private void TouchesCancelledHandler(object sender, TouchEventArgs e) {        foreach (TouchPoint tp in e.Touches) {            if (id_ == tp.Id) {                EndCancel();                break;            }        }    }    private void EndCancel() {        on_drag_ = false;        id_ = InvalidId;        start_ = Vector2.zero;        now_   = Vector2.zero;        line_renderer_.enabled = false;        if (on_world_dir_end_ != null) {            on_world_dir_end_();        }    }    private void OnWorldDir() {        if (start_ == now_) {
            return;
        }        Vector3 p0 = camera_.ScreenToWorldPoint(new Vector3(start_.x, start_.y, LineNearZ));        Vector3 p1 = camera_.ScreenToWorldPoint(new Vector3(now_.x, now_.y, LineNearZ));        line_renderer_.SetPosition(0, p0);        line_renderer_.SetPosition(1, p1);        if (on_world_dir_ == null) {            return;        }        Transform t = camera_.transform;        Ray ray0 = new Ray(p0, t.forward);        Ray ray1 = new Ray(p1, t.forward);        Plane plane = new Plane(Vector3.up, Vector3.zero);        float enter;        if (plane.Raycast(ray0, out enter)) {            Vector3 w0 = ray0.GetPoint(enter);            if (plane.Raycast(ray1, out enter)) {                Vector3 w1 = ray1.GetPoint(enter);                Vector3 dir = w1 - w0;                dir.y = 0.0f;                dir.Normalize();                Vector2 screen_size = new Vector2((float)Screen.width, (float)Screen.height);                Vector2 line_size = now_ - start_;                float power = line_size.magnitude / screen_size.magnitude;                on_world_dir_(new Vector2(dir.x, dir.z), power);            }        }    }}